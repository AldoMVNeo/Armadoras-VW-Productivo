/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package neology.vc.actions.permisos;

import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import neology.modelo.dto.EstadoCatalogo;
import neology.modelo.dto.Perfil;
import neology.modelo.dto.PermisoMenu;
import neology.modelo.dto.Usuario;
import neology.modelo.negocio.daos.EstadoCatalogoDAO;
import neology.modelo.negocio.daos.MenuDAO;
import neology.modelo.negocio.daos.PerfilDAO;
import neology.modelo.negocio.daos.PermisosMenuDAO;
import neology.modelo.negocio.daos.UsuarioDAO;
import neology.modelo.negocio.servicios.DAOFactory;
import neology.recursos.GetProperties;
import neology.util.FechaUtil;
import neology.util.StringUtil;
import neology.util.Utilidades;
import neology.util.menu.GeneradorMenu;
import neology.vc.actions.login.LoginAction;
import neology.vc.forms.permisos.GenerarPermisosDeUsuarioForm;
import neology.util.menu.Menu;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.actions.DispatchAction;

public class GestionPermisosDeUsuarioAction extends DispatchAction {
	private String[] seleccionados;
	GetProperties prop;
	/*
	 * Generated Methods
	 */

	/** 
	 * Inicio de carga de perfiles
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
		
	public ActionForward inicio(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		Logger loggerInfo = Utilidades.loggerInfo();
		Logger loggerError = Utilidades.loggerError();
		ActionMessages mensaje = new ActionMessages();
		loggerInfo.info(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction inicio - INICIO***");
		try{
		GenerarPermisosDeUsuarioForm formulario=(GenerarPermisosDeUsuarioForm)form;
		PerfilDAO perfilDAO=DAOFactory.crearPerfilDAO();
		//Se obtienen la lista de perfiles disponibles solo estados Activo e Inactivo
		List perfiles=perfilDAO.buscarPerfilesParaEditar();
		prop = new GetProperties();
		Boolean def=false;
		
		for(int i=0;i<perfiles.size();i++){
			
			Perfil per = (Perfil)perfiles.get(i);
			
			if(per.getEstatus().equals("0")){
				
				per.setEstatus(prop.strMessage("texto.estatus.activo"));
				def=true;
				
			}
			
			if(per.getEstatus().equals("1")){

				per.setEstatus(prop.strMessage("texto.estatus.inactivo"));
				def=true;
				
			}
			
			if(per.getEstatus().equals("2")){
				
				per.setEstatus(prop.strMessage("texto.estatus.eliminado"));
				def=true;
				
			}
			
			if(!def){
				
				per.setEstatus(prop.strMessage("texto.estatus.default"));
				
			}
			
			perfiles.set(i, per);
			def=false;
			
		}
		
		formulario.setPerfiles(perfiles);
		request.setAttribute("perfiles",perfiles);
		
		loggerInfo.info(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction inicio - FIN***");
		loggerInfo.removeAllAppenders();
		loggerError.removeAllAppenders();
		return mapping.findForward("cargarPerfiles");
		}catch(Exception e){
			loggerError.error(FechaUtil.getHoraActual()+"_Fallo GestionPermisosDeUsuarioAction inicio", e);
			loggerError.error(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction inicio - FIN***");
			loggerInfo.removeAllAppenders();
			loggerError.removeAllAppenders();
			mensaje.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("texto.etiqueta.error.log"));		
			request.setAttribute("mensaje", mensaje);
			return mapping.findForward("cargarPerfiles");
		}
	}
	
	public ActionForward altaPerfil(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		Logger loggerInfo = Utilidades.loggerInfo();
		Logger loggerError = Utilidades.loggerError();
		ActionMessages mensaje = new ActionMessages();
		
		loggerInfo.info(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction altaPerfil - INICIO***");
		try{
		GenerarPermisosDeUsuarioForm formulario=(GenerarPermisosDeUsuarioForm)form;
		EstadoCatalogoDAO estadoDAO=DAOFactory.crearEstadoCatalogoDAO();
		MenuDAO menuDAO=DAOFactory.crearMenuDAO();
		formulario.setEstados(estadoDAO.obtenerEstados(false));
		String path=this.getServlet().getServletContext().getRealPath("neology/paginas/catalogos/permisos/");
		String nombreArchivo="PermisoAlta.xml";
		//Se genera el archivo XML con la lista de menus
		Menu menu = GeneradorMenu.getListaMenu(menuDAO.buscarMenus());
		menu.generarArchivoXMLArbol(path,nombreArchivo);
		
		loggerInfo.info(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction altaPerfil - FIN***");
		loggerInfo.removeAllAppenders();
		loggerError.removeAllAppenders();
		return mapping.findForward("inicioAlta");
		}catch(Exception e){
			loggerError.error(FechaUtil.getHoraActual()+"_Fallo GestionPermisosDeUsuarioAction altaPerfil", e);
			loggerError.error(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction altaPerfil - FIN***");
			loggerInfo.removeAllAppenders();
			loggerError.removeAllAppenders();
			mensaje.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("texto.etiqueta.error.log"));		
			request.setAttribute("mensaje", mensaje);
			return mapping.findForward("inicioAlta");
		}
	}
	
	public ActionForward agregarPerfil(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		Logger loggerInfo = Utilidades.loggerInfo();
		Logger loggerError = Utilidades.loggerError();
		ActionMessages mensaje = new ActionMessages();
		loggerInfo.info(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction agregarPerfil - INICIO***");
		
		try{
		//Si  ha cancelado el usuario
		if(this.isCancelled(request)){
			loggerInfo.info(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction agregarPerfil - FIN***");
			loggerInfo.removeAllAppenders();
			loggerError.removeAllAppenders();
			return(mapping.findForward("cancelar"));
		}
		//Se obtienen los valores del nuevo perfil
		GenerarPermisosDeUsuarioForm formulario=(GenerarPermisosDeUsuarioForm)form;
		ActionMessages errores = new ActionMessages();
		MenuDAO menuDAO=DAOFactory.crearMenuDAO();
		PerfilDAO perfilDAO=DAOFactory.crearPerfilDAO();
		String nombrePerfil=StringUtil.primeraMayuscula(formulario.getNombrePerfil().trim());
		Integer idEstado=formulario.getEstado();		
		String menuSeleccionados=formulario.getMenuSeleccionados();
		
		loggerInfo.info(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction inicio agregarPerfil validar");
		//Validar vacios
		if(nombrePerfil.equals("") || menuSeleccionados.equals("") ||idEstado==-1){
			mensaje = new ActionMessages();
			mensaje.add("mensaje", new ActionMessage(
					"texto.campos.vacios"));
			request.setAttribute("mensaje", mensaje);
			loggerError.error(FechaUtil.getHoraActual()+
					"   "
					+ "_GestionPermisosDeUsuarioAction agregarPerfil fallo validar- FIN***"+
					prop.strMessage("texto.campos.vacios"));
			loggerInfo.removeAllAppenders();
			loggerError.removeAllAppenders();
			return mapping.findForward("exitoModificacion");
		}
		
		
		if(perfilDAO.existePerfil(nombrePerfil.toLowerCase())){
			mensaje = new ActionMessages();
			mensaje.add("mensaje", new ActionMessage(
					"errors.existe.registro","El Nombre del Perfil "+nombrePerfil));		
			request.setAttribute("mensaje", mensaje);
			loggerError.error(FechaUtil.getHoraActual()+"   "
					+ "GestionPermisosDeUsuarioAction agregarPerfil - FIN***"+
					prop.strMessage("errors.existe.registro"));
			loggerInfo.removeAllAppenders();
			loggerError.removeAllAppenders();
			return mapping.findForward("exitoModificacion");
		}
//		if (errores.size() > 0) {
//			saveErrors(request, errores);
//			return mapping.getInputForward();
//		}
		
		loggerInfo.info(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction fin agregarPerfil validar");
		if(menuSeleccionados.length()>0)
			menuSeleccionados="1,"+menuSeleccionados;
		//Se crea el Perfil y se asignan los datos
		loggerInfo.info(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction inicio agregarPerfil guardar "+ nombrePerfil);
		Perfil perfil=new Perfil();		
		perfil.setNombrePerfil(nombrePerfil);
		perfil.setEstatus(String.valueOf(idEstado));
		this.seleccionados=menuSeleccionados.split(",");
		List<neology.modelo.dto.Menu> listaMenus=menuDAO.buscarMenus();
		Set permisos=  new HashSet(0);
		//Asignacion de los permisos de menus del perfil
		for(neology.modelo.dto.Menu menu:listaMenus){
			PermisoMenu permiso=new PermisoMenu();
			permiso.setMenu(menu);
			permiso.setPerfil(perfil);
			permiso.setActivo(marcadoComoActivo(menu.getIdMenu()));
			permisos.add(permiso);
		}
		perfil.setPermisosMenus(permisos);
		//Se guarda el perfil en la base de datos
		boolean exito=perfilDAO.agregarPerfil(perfil);
		if(!exito)
			errores.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
					"errors.guardar","el Perfil"));
			if (errores.size() > 0) {
				saveErrors(request, errores);
				loggerError.error(FechaUtil.getHoraActual()+
						"_GestionPermisosDeUsuarioAction agregarPerfil - FIN***");
				loggerInfo.removeAllAppenders();
				loggerError.removeAllAppenders();
				return mapping.getInputForward();
			}
		mensaje = new ActionMessages();
		mensaje.add("mensaje", new ActionMessage(
				"mensaje.guardar.exitoso","el Perfil de "+nombrePerfil));		
		request.setAttribute("mensaje", mensaje);
		loggerInfo.info(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction fin agregarPerfil guardar "+ nombrePerfil);
		loggerInfo.debug(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction agregarPerfil - FIN***");
		loggerInfo.removeAllAppenders();
		loggerError.removeAllAppenders();
		return mapping.findForward("exitoModificacion");
		}catch(Exception e){
			mensaje = new ActionMessages();
			mensaje.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("texto.etiqueta.error.log"));		
			request.setAttribute("mensaje", mensaje);
			loggerError.error(FechaUtil.getHoraActual()+"_Fallo GestionPermisosDeUsuarioAction agregarPerfil", e);
			loggerError.error(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction agregarPerfil - FIN***");
			loggerInfo.removeAllAppenders();
			loggerError.removeAllAppenders();
			return mapping.findForward("exitoModificacion");
		}
	}
	
	public ActionForward modificarPerfil(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		Logger loggerInfo = Utilidades.loggerInfo();
		Logger loggerError = Utilidades.loggerError();
		ActionMessages mensaje = new ActionMessages();
		
		loggerInfo.info(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction modificarPerfil - INICIO***");
		try{
		GenerarPermisosDeUsuarioForm formulario=(GenerarPermisosDeUsuarioForm)form;
		Long idPerfil=Long.parseLong(request.getParameter("idPerfil"));
		EstadoCatalogoDAO estadoDAO=DAOFactory.crearEstadoCatalogoDAO();
		PerfilDAO perfilDAO=DAOFactory.crearPerfilDAO();
		MenuDAO menuDAO=DAOFactory.crearMenuDAO();
		Perfil perfil=perfilDAO.buscarPorId(idPerfil);
		//Se obtinen la lista de los menus del sistema
		Menu menu = GeneradorMenu.getListaMenu(menuDAO.buscarMenus());
		
		String menuActivos="";
		String path=this.getServlet().getServletContext().getRealPath("neology/paginas/catalogos/permisos/");
		String nombreArchivo="Permiso"+perfil.getIdPerfil()+".xml";
		//Se genera el archivo XML necesario para la visualizacion del arbol de menus
		menu.generarArchivoXMLArbol(path,nombreArchivo);	
		Iterator it=perfil.getPermisosMenus().iterator();
		
		while(it.hasNext()){
			PermisoMenu permiso=(PermisoMenu)it.next();
			if(permiso.getMenu().getIdMenu().compareTo(new Long(1))==0)
				continue;
			if(permiso.isActivo())
			menuActivos=menuActivos+permiso.getMenu().getIdMenu()+";";
		}
		if(menuActivos.endsWith(";"))
			menuActivos=menuActivos.substring(0,menuActivos.lastIndexOf(";"));
		formulario.setIdPerfil(perfil.getIdPerfil());
		formulario.setNombrePerfil(perfil.getNombrePerfil());	
		formulario.setEstado(Integer.valueOf(perfil.getEstatus()));
		formulario.setEstados(estadoDAO.obtenerEstados(false));
		formulario.setMenuActivos(menuActivos);
		loggerInfo.info(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction modificarPerfil - FIN***");
		loggerInfo.removeAllAppenders();
		loggerError.removeAllAppenders();
		return mapping.findForward("modificarPerfil");
		}catch(Exception e){
			loggerError.error(FechaUtil.getHoraActual()+"_Fallo GestionPermisosDeUsuarioAction modificarPerfil", e);
			loggerError.error(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction modificarPerfil - FIN***");
			loggerInfo.removeAllAppenders();
			loggerError.removeAllAppenders();
			mensaje.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("texto.etiqueta.error.log"));		
			request.setAttribute("mensaje", mensaje);
			return mapping.findForward("modificarPerfil");
		}
	}
	
	/** 
	 * Actualiza un perfil con nuevos datos
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward actualizarPerfil(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		Logger loggerInfo = Utilidades.loggerInfo();
		Logger loggerError = Utilidades.loggerError();
		ActionMessages errores = new ActionMessages();
		
		loggerInfo.info(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction actualizarPerfil - INICIO***");
		try{
		if(this.isCancelled(request)){		
			loggerInfo.info(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction actualizarPerfil - FIN***");
			loggerInfo.removeAllAppenders();
			loggerError.removeAllAppenders();
			return(mapping.findForward("cancelar"));
		}
		//Se obtienen los nuevos datos del perfil
		GenerarPermisosDeUsuarioForm formulario=(GenerarPermisosDeUsuarioForm)form;
		
		String nombrePerfil=StringUtil.primeraMayuscula(formulario.getNombrePerfil().trim());
		String seleccionados=formulario.getMenuSeleccionados();
		if(seleccionados.length()>0)
			seleccionados="1,"+seleccionados;
		Integer idEstado=formulario.getEstado();
		Long idPerfil=formulario.getIdPerfil();
		PerfilDAO perfilDAO=DAOFactory.crearPerfilDAO();
		UsuarioDAO usuarioDAO=DAOFactory.crearUsuarioDAO();
		ActionMessages mensaje = new ActionMessages();
		
		//Validar vacios
				if(nombrePerfil.equals("") || seleccionados.equals("") ||idEstado==-1){
					mensaje = new ActionMessages();
					mensaje.add("mensaje", new ActionMessage(
							"texto.campos.vacios"));
					request.setAttribute("mensaje", mensaje);
					loggerError.error(FechaUtil.getHoraActual()+"   "
							+ "_GestionPermisosDeUsuarioAction actualizarPerfil - FIN*** "+prop.strMessage("texto.campos.vacios"));
					loggerInfo.removeAllAppenders();
					loggerError.removeAllAppenders();
					return mapping.findForward("exitoModificacion");
				}
		
		loggerInfo.info(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction inicio actualizarPerfil validar");
		//Se verifica que no exista el nombre del perfil
		if(perfilDAO.existePerfil(idPerfil, nombrePerfil.toLowerCase())){
			errores.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
					"errors.existe.registro","El Nombre de Perfil "+nombrePerfil));
			loggerError.error(FechaUtil.getHoraActual()+"   "
					+ "GestionPermisosDeUsuarioAction actualizarPerfil - FIN***"+prop.strMessage("errors.existe.registro"));
		}
		if (errores.size() > 0) {
			saveErrors(request, errores);
			loggerError.error(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction actualizarPerfil fallo- FIN*** ");
			loggerInfo.removeAllAppenders();
			loggerError.removeAllAppenders();
			return mapping.getInputForward();
		}
		errores.clear();
		PermisosMenuDAO permisosDAO=DAOFactory.crearPermisosMenuDAO();
		//Asignacion de los nuevos valores
		Perfil perfil=perfilDAO.buscarPorId(idPerfil);
		perfil.setEstatus(String.valueOf(idEstado));
		perfil.setNombrePerfil(nombrePerfil);		
		boolean exitoso=false;
		loggerInfo.info(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction fin actualizarPerfil validar");
		loggerInfo.info(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction inicio actualizarPerfil actualizar "+ nombrePerfil);
		//Se actualiza el perfil
		if(perfilDAO.actualizar(perfil)){	
		exitoso=permisosDAO.actualizarActivo(idPerfil,seleccionados,false);
		if(seleccionados.length()>0){
		exitoso=permisosDAO.actualizarActivo(idPerfil,seleccionados,true);
		}
		//Los usuarios asignados al perfil  cambian tambien su estado
		if(perfil.getEstatus().compareTo(String.valueOf(EstadoCatalogo.INACTIVO))==0)
		exitoso=usuarioDAO.actualizarEstado(perfil.getIdPerfil(),EstadoCatalogo.INACTIVO);
		loggerInfo.info(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction fin actualizarPerfil actualizar "+ nombrePerfil);
		}
		else
		exitoso=false;
		if(!exitoso)
			errores.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
					"errors.guardar","el Perfil"));
			if (errores.size() > 0) {
				saveErrors(request, errores);
				loggerError.error(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction actualizarPerfil fallo- FIN*** ");
				loggerInfo.removeAllAppenders();
				loggerError.removeAllAppenders();
				return mapping.getInputForward();
			}
			mensaje = new ActionMessages();
			mensaje.add("mensaje", new ActionMessage(
					"mensaje.guardar.exitoso","el Perfil de "+nombrePerfil));		
			request.setAttribute("mensaje", mensaje);
			loggerInfo.info(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction actualizarPerfil - FIN***");
			loggerInfo.removeAllAppenders();
			loggerError.removeAllAppenders();
			return mapping.findForward("exitoModificacion");
		}catch(Exception e){
			loggerError.error(FechaUtil.getHoraActual()+"_Fallo GestionPermisosDeUsuarioAction actualizarPerfil", e);
			loggerError.error(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction actualizarPerfil - FIN***");
			loggerInfo.removeAllAppenders();
			loggerError.removeAllAppenders();
			errores.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("texto.etiqueta.error.log"));		
			saveErrors(request, errores);
			return mapping.findForward("exitoModificacion");
		}
	}
	
	public ActionForward eliminarPerfil(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		Logger loggerInfo = Utilidades.loggerInfo();
		Logger loggerError = Utilidades.loggerError();
		ActionMessages mensaje = new ActionMessages();
		
		loggerInfo.info(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction eliminarPerfil - INICIO***");
		try{
		ActionMessages errores = new ActionMessages();
		boolean exito=false;
		Long idPerfil=Long.parseLong(request.getParameter("idPerfil"));
		PerfilDAO perfilDAO=DAOFactory.crearPerfilDAO();
		UsuarioDAO usuarioDAO=DAOFactory.crearUsuarioDAO();
		Perfil perfil=perfilDAO.buscarPorId(idPerfil);
		GenerarPermisosDeUsuarioForm formulario=(GenerarPermisosDeUsuarioForm)form;
		//Se actualiza el Perfil al estado de Eliminado
		perfil.setEstatus(String.valueOf(EstadoCatalogo.ELIMINADO));
		//Se actualiza el perfil con el nuevo estado en la base de datos
		loggerInfo.info(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction inicio eliminarPerfil eliminar "+ perfil.getNombrePerfil());
		exito=perfilDAO.actualizar(perfil);
		//Los usuarios asociados al Perfil se actualizan a Estado de Inactivo
		if(exito){		
			exito=usuarioDAO.actualizarEstado(perfil.getIdPerfil(),EstadoCatalogo.INACTIVO);
		if(!exito){
			mensaje.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
					"error.perfil.actualiza"));
			    request.setAttribute("mensaje", mensaje);
				loggerError.error(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction eliminarPerfil fallo");
				loggerInfo.removeAllAppenders();
				loggerError.removeAllAppenders();
				return mapping.findForward("exitoModificacion");
		}
		}else{
			mensaje.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
					"error.perfil.actualiza.perfil"));
			    request.setAttribute("mensaje", mensaje);
				loggerError.error(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction eliminarPerfil fallo");
				loggerInfo.removeAllAppenders();
				loggerError.removeAllAppenders();
				return mapping.findForward("exitoModificacion");
		}
		mensaje.add("mensaje", new ActionMessage(
				"mensaje.eliminar.exitoso","el Perfil de "+perfil.getNombrePerfil()));		
		request.setAttribute("mensaje", mensaje);
//			return mapping.findForward("exitoEliminar");
		loggerInfo.info(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction fin eliminarPerfil eliminar "+ perfil.getNombrePerfil());
		List perfiles=perfilDAO.buscarPerfilesParaEditar();
		formulario.setPerfiles(perfiles);
		request.setAttribute("perfiles",perfiles);
		loggerInfo.info(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction eliminarPerfil - FIN***");
		loggerInfo.removeAllAppenders();
		loggerError.removeAllAppenders();
		return mapping.findForward("exitoModificacion");
		}catch(Exception e){
			loggerError.error(FechaUtil.getHoraActual()+"_Fallo GestionPermisosDeUsuarioAction eliminarPerfil", e);
			loggerError.error(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction eliminarPerfil - FIN***");
			loggerInfo.removeAllAppenders();
			loggerError.removeAllAppenders();
			mensaje.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("texto.etiqueta.error.log"));		
			request.setAttribute("mensaje", mensaje);
			return mapping.findForward("exitoModificacion");
		}
	}
	
	private boolean marcadoComoActivo(Long idMenu){
		
		log.debug(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction marcadoComoActivo - INICIO***");
		boolean resultado=false;
		for(String temp:seleccionados){
		if(temp.equals(idMenu.toString())){
			resultado=true;
			break;
		}
		}
		log.debug(FechaUtil.getHoraActual()+"_GestionPermisosDeUsuarioAction marcadoComoActivo - FIN***");
		return resultado;
	}
	
}